package lagatrix.client.gui.views.main.form;

import lagatrix.client.connection.RequesterManager;
import lagatrix.client.entities.actions.ActionsEnum;
import lagatrix.client.entities.dto.hardware.*;
import lagatrix.client.entities.dto.os.OSInformation;
import lagatrix.client.exceptions.BadExecutionException;
import lagatrix.client.exceptions.connection.ConnectionException;
import lagatrix.client.gui.components.complex.panels.CPUPanel;
import lagatrix.client.gui.components.complex.panels.RAMPanel;
import lagatrix.client.gui.views.main.getters.Getter;
import lagatrix.client.gui.views.main.getters.MonitoringGetter;

/**
 * This view display the monitoring of server.
 * 
 * @author javierfh03
 * @since 0.2
 */
public class MonitoringView extends MainView {
    
    private RequesterManager requester;

    /**
     * The constructor of the class.
     */
    public MonitoringView() {
        initComponents();
    }
    
    @Override
    public Getter inicialiceGetter() {
        return new MonitoringGetter(this, requester, 100);
    }

    public CPUPanel getCPUPanel() {
        return cpuPanel;
    }

    public RAMPanel getRAMPanel() {
        return ramPanel;
    }

    /**
     * Obtain the static information of OS, CPU, RAM and GPU.
     * 
     * @throws BadExecutionException If the action not exec.
     * @throws ConnectionException If have an error in the connection.
     */
    public void getStaticInformation() throws BadExecutionException, ConnectionException {
        cpuPanel.setCpu((CPU) requester.makeRequest(ActionsEnum.GET, CPU.class).getResponse());
        ramPanel.setRam((RAM) requester.makeRequest(ActionsEnum.GET, RAM.class).getResponse());
        gpuPanel.setGpu((GPU) requester.makeRequest(ActionsEnum.GET, GPU.class).getResponse());
        osPanel.setOs((OSInformation) requester.makeRequest(ActionsEnum.GET, OSInformation.class).getResponse());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gpuPanel = new lagatrix.client.gui.components.complex.panels.GPUPanel();
        cpuPanel = new lagatrix.client.gui.components.complex.panels.CPUPanel();
        ramPanel = new lagatrix.client.gui.components.complex.panels.RAMPanel();
        osPanel = new lagatrix.client.gui.components.complex.panels.OSPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(885, 552));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cpuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gpuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(osPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ramPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(osPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                        .addComponent(ramPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cpuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gpuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private lagatrix.client.gui.components.complex.panels.CPUPanel cpuPanel;
    private lagatrix.client.gui.components.complex.panels.GPUPanel gpuPanel;
    private lagatrix.client.gui.components.complex.panels.OSPanel osPanel;
    private lagatrix.client.gui.components.complex.panels.RAMPanel ramPanel;
    // End of variables declaration//GEN-END:variables

}
